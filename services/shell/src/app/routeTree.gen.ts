/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LandingImport } from './routes/landing'
import { Route as AnalyticsImport } from './routes/analytics'
import { Route as IndexImport } from './routes/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as AnalyticsIndexImport } from './routes/analytics/index'
import { Route as AuthLayoutImport } from './routes/auth/_layout'
import { Route as AnalyticsIdImport } from './routes/analytics/$id'
import { Route as AuthLayoutSignupImport } from './routes/auth/_layout.signup'
import { Route as AuthLayoutRecoveryImport } from './routes/auth/_layout.recovery'
import { Route as AuthLayoutProfileImport } from './routes/auth/_layout.profile'
import { Route as AuthLayoutLoginImport } from './routes/auth/_layout.login'

// Create Virtual Routes

const AuthImport = createFileRoute('/auth')()

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const LandingRoute = LandingImport.update({
  id: '/landing',
  path: '/landing',
  getParentRoute: () => rootRoute,
} as any)

const AnalyticsRoute = AnalyticsImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

const AnalyticsIndexRoute = AnalyticsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AnalyticsRoute,
} as any)

const AuthLayoutRoute = AuthLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AuthRoute,
} as any)

const AnalyticsIdRoute = AnalyticsIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AnalyticsRoute,
} as any)

const AuthLayoutSignupRoute = AuthLayoutSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutRecoveryRoute = AuthLayoutRecoveryImport.update({
  id: '/recovery',
  path: '/recovery',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutProfileRoute = AuthLayoutProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutLoginRoute = AuthLayoutLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/analytics': {
      id: '/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsImport
      parentRoute: typeof rootRoute
    }
    '/landing': {
      id: '/landing'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof LandingImport
      parentRoute: typeof rootRoute
    }
    '/analytics/$id': {
      id: '/analytics/$id'
      path: '/$id'
      fullPath: '/analytics/$id'
      preLoaderRoute: typeof AnalyticsIdImport
      parentRoute: typeof AnalyticsImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/auth/_layout': {
      id: '/auth/_layout'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthLayoutImport
      parentRoute: typeof AuthRoute
    }
    '/analytics/': {
      id: '/analytics/'
      path: '/'
      fullPath: '/analytics/'
      preLoaderRoute: typeof AnalyticsIndexImport
      parentRoute: typeof AnalyticsImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/'
      fullPath: '/auth/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthImport
    }
    '/auth/_layout/login': {
      id: '/auth/_layout/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLayoutLoginImport
      parentRoute: typeof AuthLayoutImport
    }
    '/auth/_layout/profile': {
      id: '/auth/_layout/profile'
      path: '/profile'
      fullPath: '/auth/profile'
      preLoaderRoute: typeof AuthLayoutProfileImport
      parentRoute: typeof AuthLayoutImport
    }
    '/auth/_layout/recovery': {
      id: '/auth/_layout/recovery'
      path: '/recovery'
      fullPath: '/auth/recovery'
      preLoaderRoute: typeof AuthLayoutRecoveryImport
      parentRoute: typeof AuthLayoutImport
    }
    '/auth/_layout/signup': {
      id: '/auth/_layout/signup'
      path: '/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthLayoutSignupImport
      parentRoute: typeof AuthLayoutImport
    }
  }
}

// Create and export the route tree

interface AnalyticsRouteChildren {
  AnalyticsIdRoute: typeof AnalyticsIdRoute
  AnalyticsIndexRoute: typeof AnalyticsIndexRoute
}

const AnalyticsRouteChildren: AnalyticsRouteChildren = {
  AnalyticsIdRoute: AnalyticsIdRoute,
  AnalyticsIndexRoute: AnalyticsIndexRoute,
}

const AnalyticsRouteWithChildren = AnalyticsRoute._addFileChildren(
  AnalyticsRouteChildren,
)

interface AuthLayoutRouteChildren {
  AuthLayoutLoginRoute: typeof AuthLayoutLoginRoute
  AuthLayoutProfileRoute: typeof AuthLayoutProfileRoute
  AuthLayoutRecoveryRoute: typeof AuthLayoutRecoveryRoute
  AuthLayoutSignupRoute: typeof AuthLayoutSignupRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthLayoutLoginRoute: AuthLayoutLoginRoute,
  AuthLayoutProfileRoute: AuthLayoutProfileRoute,
  AuthLayoutRecoveryRoute: AuthLayoutRecoveryRoute,
  AuthLayoutSignupRoute: AuthLayoutSignupRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

interface AuthRouteChildren {
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/analytics': typeof AnalyticsRouteWithChildren
  '/landing': typeof LandingRoute
  '/analytics/$id': typeof AnalyticsIdRoute
  '/auth': typeof AuthLayoutRouteWithChildren
  '/analytics/': typeof AnalyticsIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/auth/login': typeof AuthLayoutLoginRoute
  '/auth/profile': typeof AuthLayoutProfileRoute
  '/auth/recovery': typeof AuthLayoutRecoveryRoute
  '/auth/signup': typeof AuthLayoutSignupRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/landing': typeof LandingRoute
  '/analytics/$id': typeof AnalyticsIdRoute
  '/auth': typeof AuthIndexRoute
  '/analytics': typeof AnalyticsIndexRoute
  '/auth/login': typeof AuthLayoutLoginRoute
  '/auth/profile': typeof AuthLayoutProfileRoute
  '/auth/recovery': typeof AuthLayoutRecoveryRoute
  '/auth/signup': typeof AuthLayoutSignupRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/analytics': typeof AnalyticsRouteWithChildren
  '/landing': typeof LandingRoute
  '/analytics/$id': typeof AnalyticsIdRoute
  '/auth': typeof AuthRouteWithChildren
  '/auth/_layout': typeof AuthLayoutRouteWithChildren
  '/analytics/': typeof AnalyticsIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/auth/_layout/login': typeof AuthLayoutLoginRoute
  '/auth/_layout/profile': typeof AuthLayoutProfileRoute
  '/auth/_layout/recovery': typeof AuthLayoutRecoveryRoute
  '/auth/_layout/signup': typeof AuthLayoutSignupRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/analytics'
    | '/landing'
    | '/analytics/$id'
    | '/auth'
    | '/analytics/'
    | '/auth/'
    | '/auth/login'
    | '/auth/profile'
    | '/auth/recovery'
    | '/auth/signup'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/landing'
    | '/analytics/$id'
    | '/auth'
    | '/analytics'
    | '/auth/login'
    | '/auth/profile'
    | '/auth/recovery'
    | '/auth/signup'
  id:
    | '__root__'
    | '/'
    | '/analytics'
    | '/landing'
    | '/analytics/$id'
    | '/auth'
    | '/auth/_layout'
    | '/analytics/'
    | '/auth/'
    | '/auth/_layout/login'
    | '/auth/_layout/profile'
    | '/auth/_layout/recovery'
    | '/auth/_layout/signup'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AnalyticsRoute: typeof AnalyticsRouteWithChildren
  LandingRoute: typeof LandingRoute
  AuthRoute: typeof AuthRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AnalyticsRoute: AnalyticsRouteWithChildren,
  LandingRoute: LandingRoute,
  AuthRoute: AuthRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/analytics",
        "/landing",
        "/auth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/analytics": {
      "filePath": "analytics.tsx",
      "children": [
        "/analytics/$id",
        "/analytics/"
      ]
    },
    "/landing": {
      "filePath": "landing.tsx"
    },
    "/analytics/$id": {
      "filePath": "analytics/$id.tsx",
      "parent": "/analytics"
    },
    "/auth": {
      "filePath": "auth",
      "children": [
        "/auth/_layout",
        "/auth/"
      ]
    },
    "/auth/_layout": {
      "filePath": "auth/_layout.tsx",
      "parent": "/auth",
      "children": [
        "/auth/_layout/login",
        "/auth/_layout/profile",
        "/auth/_layout/recovery",
        "/auth/_layout/signup"
      ]
    },
    "/analytics/": {
      "filePath": "analytics/index.tsx",
      "parent": "/analytics"
    },
    "/auth/": {
      "filePath": "auth/index.tsx",
      "parent": "/auth"
    },
    "/auth/_layout/login": {
      "filePath": "auth/_layout.login.tsx",
      "parent": "/auth/_layout"
    },
    "/auth/_layout/profile": {
      "filePath": "auth/_layout.profile.tsx",
      "parent": "/auth/_layout"
    },
    "/auth/_layout/recovery": {
      "filePath": "auth/_layout.recovery.tsx",
      "parent": "/auth/_layout"
    },
    "/auth/_layout/signup": {
      "filePath": "auth/_layout.signup.tsx",
      "parent": "/auth/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
