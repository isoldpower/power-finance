/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as OverviewRouteImport } from './routes/overview/route'
import { Route as OverviewIndexImport } from './routes/overview/index'
import { Route as OverviewProtectedImport } from './routes/overview/protected'

// Create/Update Routes

const OverviewRouteRoute = OverviewRouteImport.update({
  id: '/overview',
  path: '/overview',
  getParentRoute: () => rootRoute,
} as any)

const OverviewIndexRoute = OverviewIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OverviewRouteRoute,
} as any)

const OverviewProtectedRoute = OverviewProtectedImport.update({
  id: '/protected',
  path: '/protected',
  getParentRoute: () => OverviewRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/overview': {
      id: '/overview'
      path: '/overview'
      fullPath: '/overview'
      preLoaderRoute: typeof OverviewRouteImport
      parentRoute: typeof rootRoute
    }
    '/overview/protected': {
      id: '/overview/protected'
      path: '/protected'
      fullPath: '/overview/protected'
      preLoaderRoute: typeof OverviewProtectedImport
      parentRoute: typeof OverviewRouteImport
    }
    '/overview/': {
      id: '/overview/'
      path: '/'
      fullPath: '/overview/'
      preLoaderRoute: typeof OverviewIndexImport
      parentRoute: typeof OverviewRouteImport
    }
  }
}

// Create and export the route tree

interface OverviewRouteRouteChildren {
  OverviewProtectedRoute: typeof OverviewProtectedRoute
  OverviewIndexRoute: typeof OverviewIndexRoute
}

const OverviewRouteRouteChildren: OverviewRouteRouteChildren = {
  OverviewProtectedRoute: OverviewProtectedRoute,
  OverviewIndexRoute: OverviewIndexRoute,
}

const OverviewRouteRouteWithChildren = OverviewRouteRoute._addFileChildren(
  OverviewRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/overview': typeof OverviewRouteRouteWithChildren
  '/overview/protected': typeof OverviewProtectedRoute
  '/overview/': typeof OverviewIndexRoute
}

export interface FileRoutesByTo {
  '/overview/protected': typeof OverviewProtectedRoute
  '/overview': typeof OverviewIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/overview': typeof OverviewRouteRouteWithChildren
  '/overview/protected': typeof OverviewProtectedRoute
  '/overview/': typeof OverviewIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/overview' | '/overview/protected' | '/overview/'
  fileRoutesByTo: FileRoutesByTo
  to: '/overview/protected' | '/overview'
  id: '__root__' | '/overview' | '/overview/protected' | '/overview/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  OverviewRouteRoute: typeof OverviewRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  OverviewRouteRoute: OverviewRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/overview"
      ]
    },
    "/overview": {
      "filePath": "overview/route.tsx",
      "children": [
        "/overview/protected",
        "/overview/"
      ]
    },
    "/overview/protected": {
      "filePath": "overview/protected.tsx",
      "parent": "/overview"
    },
    "/overview/": {
      "filePath": "overview/index.tsx",
      "parent": "/overview"
    }
  }
}
ROUTE_MANIFEST_END */
